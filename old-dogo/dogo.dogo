:for [a]
  >on env %0
    :fire
      (do .rasp %dogo .a (bank 1))
      {tab
        +dogo
          (%ifix %gray %gray %noun)

        +noun
          (%one
            %tuple
            %log
            %open
            %root
            %skel
            %axen
            %number
            %0
          )

        +tuple
          (%ifix 
            (%all '(' %gray %0)
            (%all %gray ')' %0)
            (%fab
              (%all
                %noun
                (%star (%pfix %white %noun))
                %0
              )
              (code (for [c] (do .ltup .c)))
            )
          )

        +log
          (%ifix 
            (%all '{' %gray %0)
            (%all %gray '}' %0)
            (%all
              %noun
              (%star (%pfix %white %noun))
              %0
            )
          )

        +open
          (%one
            (%all
              (%pfix '+' %noun)
              (%pfix %white %noun)
              %0
            )
            (%all
              (%pfix ':' %noun)
              (%pfix %white %noun)
              (%pfix %white %noun)
              %0
            )
            (%all
              (%pfix '>' %noun)
              (%pfix %white %noun)
              (%pfix %white %noun)
              (%pfix %white %noun)
              %0
            )
            %0
          )

        +skel
          (%ifix 
            (%all '[' %gray %0)
            (%all %gray ']' %0)
            (%fab
              (%all
                %skit
                (%star (%pfix %white %skit))
                %0
              )
              (code
                :for [c]
                  {fit .c
                    +[f 0] .c.f
                    +[f r] (%pair .c.f {next (.c .c.r)})
                  }
              )
          )
        )

        +skit
          (%one
            (%fab 
              '*' 
              (code (for [c] %0))
            )
            (%fab
              (%one %number-dec (%pfix '%' %number-term) %0)
              (code (for [c] (%bone .c)))
            )
            (%fab
              (%all %number-term (%free (%pfix '.' %skel)) %0)
              (code (for [c.[h t]] (%skin .c.h .c.t)))
            )
            %skel
            %0
          )

        +axen
          (%fab
            (%some %axe)
            (code 
              :for [c]
                {fit .c
                  +[f 0] .c.f
                  +[f r] (%nest .c.f {next (.c .c.r)})
                }
            )
          )

        +axe
          (%one
            (%fab
              (%pfix '.' %number-term)
              (code (for [c] (%seek .c)))
            )
            (%fab
              (%pfix '/' %number-dec)
              (code (for [c] (%limb .c)))
            )
            %0
          )

        +root
          (%one
            (%fab 
              (%pfix '^' %noun)
              (code (for [c] (%root %bump .c)))
            )
            (%fab 
              (%pfix '&' %noun)
              (code (for [c] (%root %deep .c)))
            )
            (%fab 
              (%pfix '@' %noun)
              (code (for [c] (%root %flat .c)))
            )
            (%fab 
              (%pfix '*' %noun)
              (code (for [c] (%root %goto .c)))
            )
            (%fab 
              (%pfix '!' %noun)
              (code (for [c] (%root %not .c)))
            )
            (%fab 
              (%pfix '=' %noun)
              (code (for [c] (%root %same .c)))
            )
            %0
          )

        +number 
          (%one
            %number-noun
            %number-term
            %number-hex
            %number-dec
            %number-quote
            %0
          )

        +number-noun
          (%fab
            (%pfix '%' %number)
            (code (for [c] (%noun .c)))
          )

        +number-term
          (%fab
            (%all
              (%one (%byte 'a' 'z') (%byte 'A' 'Z') %0)
              (%star
                (%one 
                  (%byte 'a' 'z') 
                  (%byte 'A' 'Z') 
                  (%byte '0' '9')
                  '-'
                  %0
                )
              )
              %0
            )
            (code (for [c] (do .glom %3 .c)))
          )

        +number-quote
          (%fab
            (%ifix %39 %39
              (%star 
                (%one 
                  (%byte %32 %38)
                  (%byte %40 %91)
                  (%byte %93 %126)
                  (%fab 
                    (%all %92 %92 %0) 
                    (code (for [c] %92))
                  )
                  (%fab 
                    (%all %92 %39 %0) 
                    (code (for [c] %39))
                  )
                  %0
                )
              )
            )
            (code (for [c] (%noun (do .glom %3 .c))))
          )

        +number-dec
          (%one
            (%fab
              '0'
              (code (for [c] %0))
            )
            (%fab
              (%all (%byte '1' '9') (%star %byte '0' '9') %0)
              (code
                :for [c]
                  >on d %0
                    +loop
                      {fit .c
                        +[0] .d
                        +[h t]
                          {next 
                            +.c .c.t
                            +.d 
                              (do .add 
                                (do .sub '0' .c.h) 
                                (do .mul %10 .d)
                              )
                          }
                      }
              )
            )
            %0
          )

        +number-hex
          (%fab
            (%pfix 
              (%text '0x')
              (%star (%one (%byte '0' '9') (%byte 'a' 'f') %0))
            )
            (code
              :for [c]
                >on d %0
                  +loop
                    {fit .c
                      +[0] .d
                      +[h t]
                        {next 
                          +.c .c.t
                          +.d
                            :do .add
                              :cell
                                (do .mul %16 .d)
                                >if (do .gte .c.h 'a')
                                  (do .sub 'W' .c.h)
                                  (do .sub '0' .c.h)
                        }
                    }
            )
          )

        +gray
          (%star (%one %comment %32 %10 %0))

        +white
          (%some (%one %comment %32 %10 %0))

        +comment
          (%all %35 (%star %byte %32 %126) %10 %0)
      }
