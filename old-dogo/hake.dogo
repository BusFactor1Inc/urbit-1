# bas: text
# mol: tab(text)
#
:for [bas mol]
  >on ris .mol
    :fire
      (do .rasp %hake .bas (bank 1))
      {tab
        +hake
          (%ifix %gray %gray %tall)

        +tall
          ( %one
            (%pfix (%all (%text ':as')   %white %0) %tall-as)
            (%pfix (%all (%text ':boot') %white %0) %tall-boot)
            (%pfix (%all (%text ':cone') %white %0) %tall-cone)
            (%pfix (%all (%text ':gear') %white %0) %tall-gear)
            (%pfix (%all (%text ':hang') %white %0) %tall-hang)
            (%pfix (%all (%text ':if')   %white %0) %tall-if)
            (%pfix (%all (%text ':loop') %white %0) %tall-loop)
            (%pfix (%all (%text ':no')   %white %0) %tall-no)
            (%pfix (%all (%text ':pick') %white %0) %tall-pick)
            (%pfix (%all (%text ':sift') %white %0) %tall-sift)
            (%pfix (%all (%text ':so')   %white %0) %tall-so)
            %tall-by
            %wide
            %0
          )

        +tall-as
          ( %fab
            ( %all
              %tall
              (%pfix %white %tall)
              %0
            )
            (code (for [c] (%as .c)))
          )

        +tall-by
          ( %fab
            ( %pfix 
              (%all '.' %white %0)
              ( %all 
                %tall
                (%pfix %white %tall)
                %0
              )
            )
            (code (for [c] (%by .c)))
          )

        +tall-boot
          ( %fab
            ( %all 
              %term
              (%pfix %white %tall)
              (%star
                (%all
                  (%pfix (%all %white '-' %white %0) %term)
                  (%pfix %white %tall)
                  %0
                )
              )
              %0
            )
            (code 
              (for [c d e] (%boot .c .d (do .ltup .e)))
            )
          )

        +tall-cone
          ( %fab
            ( %all 
              %tall
              (%star
                (%all
                  (%pfix (%all %white '-' %white %0) %term)
                  (%pfix %white %tall)
                  %0
                )
              )
              (%all
                (%pfix (%all %white '+' %white %0) %term)
                (%pfix %white %tall)
                %0
              )
              %0
            )
            (code (for [c d e] (%cone .c (do .ltup (do .lcat .d (.e %0))))))
          )

        +tall-hang
          ( %fab
            %tall
            (code (for [c] (%hang .c)))
          )

        +tall-loop
          ( %fab
            %tall
            (code (for [c] (%loop .c)))
          )

        +tall-if
          ( %fab
            ( %all
              %tall
              (%pfix %white %tall)
              (%pfix %white %tall)
              %0
            )
            (code (for [c] (%if .c)))
          )

        +tall-no
          ( %fab
            ( %all
              %tall
              (%pfix %white %tall)
              %0
            )
            (code (for [c] (%no .c)))
          )

        +tall-so
          ( %fab
            ( %all
              %tall
              (%pfix %white %tall)
              %0
            )
            (code (for [c] (%so .c)))
          )

        +tall-pick
          ( %fab
            ( %all 
              %wide-wire
              (%star
                (%pfix (%all %white '-' %white %0) %tall)
              )
              (%pfix (%all %white '+' %white %0) %tall)
              %0
            )
            (code (for [c d e] (%pick .c (do .lcat .d (.e %0)))))
          )

        +tall-sift
          ( %fab
            ( %all 
              %wide-wire
              (%star
                (%all
                  (%pfix (%all %white '-' %white %0) %wide)
                  (%pfix %white %tall)
                  %0
                )
              )
              (%all
                (%pfix (%all %white '+' %white %0) %wide)
                (%pfix %white %tall)
                %0
              )
              %0
            )
            (code (for [c d e] (%sift .c (do .lcat .d (.e %0)))))
          )

        +wide
          ( %one
            (%ifix '<' (%all %gray '>' %0) %wide-angle)
            (%ifix (%all '{' %gray %0) (%all %gray '}' %0) %wide-brace)
            (%ifix (%all '(' %gray %0) (%all %gray ')' %0) %wide-tuple)
            (%ifix (%all '[' %gray %0) (%all %gray ']' %0) %wide-brack)
            %wide-bind
            %wide-cube
            %wide-exit
            %wide-next
            %wide-noun
            %wide-use
            %wide-wire
            %0
          )

        +wide-angle
          ( %one
            (%pfix (%all (%text %and)  %white %0) %angle-and)
            (%pfix (%all (%text %cone) %white %0) %angle-cone)
            (%pfix (%all (%text %if)   %white %0) %angle-if)
            (%pfix (%all (%text %in)   %white %0) %angle-in)
            (%pfix (%all (%text %hang) %white %0) %angle-hang)
            (%pfix (%all (%text %loop) %white %0) %angle-loop)
            (%pfix (%all (%text %raw)  %white %0) %angle-raw)
            (%pfix (%all (%text %or)   %white %0) %angle-or)
            (%pfix (%all (%text %out)  %white %0) %angle-out)
            (%pfix (%all (%text %pick) %white %0) %angle-pick)
            (%pfix (%all (%text %sift) %white %0) %angle-sift)
            (%pfix (%all (%text %with) %white %0) %angle-with)
            %0
          )

        +wide-next
          ( %fab
            ( %all
              (%some '.')
              ( %ifix
                (%all '{' %gray %0) 
                (%all %gray '}' %0)
                ( %all 
                  (%all (%sfix %white %wide-wire) %wide %0)
                  ( %star
                    ( %pfix 
                      (%all ',' %white %0)
                      (%all (%sfix %white %wide-wire) %wide %0)
                    )
                  )
                  %0
                )
              )
              %0
            )
            (code (for [c d] (%next (do .dec (do .len .c)) .d)))
          )

        +wide-bind
          ( %fab
            ( %all 
              %term
              (%pfix (%all '=' %gray %0) %wide)
              %0
            )
            (code (for [c] (%name .c)))
          )

        +wide-brace
          (%fab
            ( %all
              %term
              ( %free
                ( %pfix 
                  (%all %gray ':' %white %0)
                  ( %all
                    (%all (%sfix %white %wide-wire) %wide %0)
                    ( %star
                      ( %pfix 
                        (%all ',' %white %0)
                        (%all (%sfix %white %wide-wire) %wide %0)
                      )
                    )
                    %0
                  )
                )
              )
              %0
            )
            (code (for [c] (%use .c)))
          )

        +wide-tuple
          ( %fab
            ( %all
              %wide
              (%star (%pfix %white %wide))
              %0
            )
            (code (for [c] (do .ltup .c)))
          )

        +wide-brack
          ( %fab
            ( %all 
              %wide
              (%free (%pfix %white %wide-tuple))
              %0
            ) 
            (code (for [c d] >if =(%0 .d) (%pop .c) (%snap .c .d)))
          )

        +wide-exit
          ( %fab
            (%text '!!')
            (code (for [c] (%exit %noun %0)))
          )

        +wide-use
          ( %fab
            (%pfix '*' %term)
            (code (for [c] (%use .c %0)))
          )

        +wide-wire
          ( %fab
            ( %all 
              (%one
                ( %fab
                  %term
                  (code (for [c] (%port .c)))
                )
                %wide-span
                %0
              )
              (%star %wide-span)
              %0
            )
            ( code 
              :for [c]
                +loop
                  {fit .c
                    +[i 0] .c.i
                    +[i t] (%link .c.i {next (.c .c.t)})
                  }
            )
          )
        
        +wide-span
          ( %pfix
            '.'
            ( %one
              ( %fab
                %term
                (code (for [c] (%port .c)))
              )
              ( %fab
                %decimal
                (code (for [c] (%limb .c)))
              )
              ( %fab
                (%pfix '_' %decimal)
                (code (for [c] (%home .c)))
              )
              ( %fab
                (%pfix '%' %term)
                (code (for [c] (%gate .c)))
              )
              %0
            )
          )
 
        +wide-cube
          ( %fab
            (%pfix '%'
              ( %one
                %flag
                %hexadecimal
                %decimal
                %term
                %0
              )
            )
            (code (for [c] (%cube .c)))
          )

        +wide-noun
          ( %fab
            ( %one
              %flag
              %hexadecimal
              %decimal
              %quote
              %0
            )
            (code (for [c] (%noun .c)))
          )

        +angle-and
          ( %fab
            ( %all
              %wide
              (%some (%pfix %white %wide))
              %0
            )
            (code (for [c] (%and .c)))
          )

        +angle-cone
          ( %fab
            ( %all 
              (%sfix (%all %gray ':' %white %0) %wide)
              ( %fab
                ( %all
                  (%all (%sfix %white %term) %wide %0)
                  ( %star
                    ( %pfix 
                      (%all ',' %white %0)
                      (%all (%sfix %white %term) %wide %0)
                    )
                  )
                  %0
                )
                (code (for [c] (do .ltup .c)))
              )
              %0
            )
            (code (for [c] (%cone .c)))
          )

        +angle-if
          ( %fab
            ( %all 
              %wide 
              (%pfix %white %wide)
              (%pfix %white %wide)
              %0
            )
            (code (for [c] (%if .c)))
          )

        +angle-in
          ( %fab
            ( %all 
              ( %all 
                %wide
                (%star (%pfix (%all ',' %white %0) %wide))
                %0
              )
              (%pfix (%all %gray ':' %white %0) %wide)
              %0
            )
            (code (for [c] (%in .c)))
          )

        +angle-hang
          ( %fab
            %wide
            (code (for [c] (%hang .c)))
          )

        +angle-loop
          ( %fab
            %wide
            (code (for [c] (%loop .c)))
          )

        +angle-raw
          ( %fab
            ( %all
              (%sfix %white %decimal)
              %wide-tuple
              %0
            )
            (code (for [c] (%raw .c)))
          )
              
        +angle-or
          ( %fab
            ( %all
              %wide
              (%some (%pfix %white %wide))
              %0
            )
            (code (for [c] (%or .c)))
          )

        +angle-out
          ( %fab
            (%all 
              (%sfix (%all %gray ':' %white %0) %wide)
              (%all 
                %wide
                (%some (%pfix (%all ',' %white %0) %wide))
                %0
              )
            )
            (code (for [c d] (%in .d .c)))
          )

        +angle-pick
          (%fab
            (%all
              (%sfix (%all %gray ':' %white %0) %wide-wire)
              (%all
                %wide
                (%star
                  (%pfix 
                    (%all ',' %white %0)
                    %wide
                  )
                )
                %0
              )
              %0
            )
            (code (for [c] (%pick .c)))
          )

        +angle-sift
          (%fab
            (%all 
              (%sfix (%all %gray ':' %white %0) %wide-wire)
              (%all
                (%all (%sfix %white %wide) %wide %0)
                (%some
                  (%pfix 
                    (%all ',' %white %0)
                    (%all (%sfix %white %wide) %wide %0)
                  )
                )
              )
              %0
            )
            (code (for [c] (%sift .c)))
          )

        +angle-with
          (%fab
            (%all 
              (%all 
                (%all (%sfix %white %wide-wire) %wide)
                (%some 
                  (%pfix 
                    (%all ',' %white %0)
                    (%all (%sfix %white %wide-wire) %wide)
                  )
                )
                %0
              )
              (%pfix (%all %gray ':' %white %0) %wide)
              %0
            )
            (code (for [c] (%with .c)))
          )

        +flag
          (%one
            (%fab '~' (code (for [c] %0)))
            (%fab '|' (code (for [c] %0)))
            (%fab '&' (code (for [c] %1)))
            %0
          )

        +term
          (%fab
            (%all
              (%one (%byte 'a' 'z') (%byte 'A' 'Z') %0)
              (%star
                (%one 
                  (%byte 'a' 'z') 
                  (%byte 'A' 'Z') 
                  (%byte '0' '9')
                  '-'
                  %0
                )
              )
              %0
            )
            (code (for [c] (do .glom %3 .c)))
          )

        +quote
          (%fab
            (%ifix %39 %39
              (%star 
                (%one 
                  (%byte %32 %38)
                  (%byte %40 %91)
                  (%byte %93 %126)
                  (%fab 
                    (%all %92 %92 %0) 
                    (code (for [c] %92))
                  )
                  (%fab 
                    (%all %92 %39 %0) 
                    (code (for [c] %39))
                  )
                  %0
                )
              )
            )
            (code (for [c] (%noun (do .glom %3 .c))))
          )

        +decimal
          (%one
            (%fab
              '0'
              (code (for [c] %0))
            )
            (%fab
              (%all (%byte '1' '9') (%star %byte '0' '9') %0)
              (code
                :for [c]
                  >on d %0
                    +loop
                      {fit .c
                        +[0] .d
                        +[h t]
                          {next 
                            +.c .c.t
                            +.d 
                              (do .add 
                                (do .sub '0' .c.h) 
                                (do .mul %10 .d)
                              )
                          }
                      }
              )
            )
            %0
          )

        +hexadecimal
          (%fab
            (%pfix 
              (%text '0x')
              (%star (%one (%byte '0' '9') (%byte 'a' 'f') %0))
            )
            (code
              :for [c]
                >on d %0
                  +loop
                    {fit .c
                      +[0] .d
                      +[h t]
                        {next 
                          +.c .c.t
                          +.d
                            :do .add
                              :cell
                                (do .mul %16 .d)
                                >if (do .gte .c.h 'a')
                                  (do .sub 'W' .c.h)
                                  (do .sub '0' .c.h)
                        }
                    }
            )
          )

        +gray
          (%star (%one %comment %32 %10 %0))

        +white
          (%some (%one %comment %32 %10 %0))

        +comment
          (%all '-' '-' (%star %byte %32 %126) %10 %0)
      }
  
