# bas: text
# mol: tab(text)
#
:for [bas mol]
  >on ris .mol
    :fire
      (do .rasp %bach .bas (bank 1))
      {tab
        +bach
          (%ifix %gray %gray %tall)

        +w-tall (%pfix %white %tall)
        +tall
          (%one 
            (%pfix ':' (%all (%text %boot) %tall-form-d %0))
            (%pfix ':' (%all (%text %do)   %tall-form-a %0))
            (%pfix ':' (%all (%text %fit)  %tall-form-f %0))
            (%pfix ':' (%all (%text %if)   %tall-form-c %0))
            (%pfix ':' (%all (%text %loop) %tall-form-a %0))
            (%pfix ':' (%all (%text %on)   %tall-form-e %0))
            (%pfix ':' (%all (%text %over) %tall-form-b %0))
            (%pfix ':' (%all (%text %to)   %tall-form-b %0))
            %wide
            %0
          )

        +tall-boot
          ( %all
            %w-term
            %tall-form-e
            %0
          )
    
        +tall-form-a %w-tall
        +tall-form-b (%all %w-tall %w-tall %0)
        +tall-form-c (%all %w-tall %w-tall %w-tall %0)
        +tall-form-d
          ( %all
            %w-term
            %w-tall
            ( %fab
              ( %all
                (%star (%pfix %w-dash (%all %w-term %w-tall %0)))
                ( %one
                  (%pfix %w-qual (%all %w-term %w-tall %0))
                  (%fab %w-stop (code (for [c] %0)))
                  %0
                )
                %0
              )
              (code (for [c d] (if =(%0 .d) .c (do .lcat .c (.d %0)))))
            )
            %0
          )
        +tall-form-e (%all %w-term %w-tall %w-tall %0)
        +tall-form-f
          ( %all
            %w-tall
            ( %fab
              ( %all
                (%star (%pfix %w-dash (%all %w-tall %w-tall %0)))
                ( %one
                  (%pfix %w-qual (%all %w-tall %w-tall %0))
                  (%fab %w-stop (code (for [c] %0)))
                  %0
                )
                %0
              )
              (code (for [c d] (if =(%0 .d) .c (do .lcat .c (.d %0)))))
            )
            %0
          )
 
        +w-dash (%all %white '-' %0)
        +w-qual (%all %white '=' %0)
        +w-stop (%all %white '=' '=' %0)

        +w-wide (%pfix %white %wide)
        +wide
          ( %fab
            ( %all 
              %wide-core 
              ( %star
                ( %all
                  ( %sfix %gray
                    ( %one
                      (%fab '.' (code (for [c] %knit)))
                      (%fab '+' (code (for [c] %to)))
                      %0
                    )
                  )
                  %wide
                  %0
                )
              )
              %0
            )
            (code 
              :for [c d]
                {fit .d
                  +[0] .c
                  +[i.[p q] t] 
                    (.d.i.p .c {next (.c .d.i.q) (.d .d.t)})
                }
            )
          )

        +wide-core
          ( %one
            (%ifix (%all '(' %gray %0) (%all %gray ')' %0) %wide-paren)
            (%ifix (%all '{' %gray %0) (%all %gray '}' %0) %wide-brace)
            (%ifix (%all '<' %gray %0) (%all %gray '>' %0) %wide-angle)
            (%ifix (%all '[' %gray %0) (%all %gray ']' %0) %wide-brack)
            %wide-bare
            %0
          )

        +wide-paren 
          %wide-tuple

        +wide-brace 
          (%fab
            ( %all
              (%sfix ':' %wide)
              (%all %w-wide %w-wide %0)
              (%star (%pfix ',' (%all %w-wide %w-wide %0)))
              %0
            )
            (code (for [c] (%bend .c)))
          )

        +wide-angle 
          ( %fab
            ( %all 
              %wide
              (%star (%pfix %white %wide)) 
              %0
            ) 
            (code 
              :for [c d] 
                >if =(%0 .d) (%pop .c) (%snap .c (do .ltup .d))
            )
          )
 
        +wide-brack
          ( %one 
            (%all (%text %all)  %wide-brack-all  %0)
            (%all (%text %any)  %wide-brack-any  %0)
            (%all (%text %do)   %wide-brack-do   %0)
            (%all (%text %exit) %wide-brack-exit %0)
            (%all (%text %fit)  %wide-brack-fit  %0)
            (%all (%text %if)   %wide-brack-if   %0)
            (%all (%text %kit)  %wide-brack-kit  %0)
            (%all (%text %link) %wide-brack-link %0)
            (%all (%text %loop) %wide-brack-loop %0)
            (%all (%text %mark) %wide-brack-mark %0)
            (%all (%text %bend) %wide-brack-bend %0)
            (%all (%text %no)   %wide-brack-no   %0)
            (%all (%text %not)  %wide-brack-not  %0)
            (%all (%text %pop)  %wide-brack-pop  %0)
            (%all (%text %raw)  %wide-brack-raw  %0)
            (%all (%text %snap) %wide-brack-snap %0)
            (%all (%text %so)   %wide-brack-so   %0)
            (%all (%text %over) %wide-brack-over %0)
            (%all (%text %to)   %wide-brack-to   %0)
            (%all (%text %un)   %wide-brack-un   %0)
            %0
          )

        +wide-brack-all  %wide-form-c
        +wide-brack-any  %wide-form-c
        +wide-brack-do   %wide-form-a
        +wide-brack-exit %wide-form-a
        +wide-brack-fit  %wide-form-e
        +wide-brack-if   %wide-form-f
        +wide-brack-kit  %wide-form-d
        +wide-brack-link %wide-form-b
        +wide-brack-loop %wide-form-a
        +wide-brack-mark %wide-form-b
        +wide-brack-bend %wide-form-e
        +wide-brack-no   %wide-form-b
        +wide-brack-not  %wide-form-a
        +wide-brack-pop  %wide-form-a
        +wide-brack-raw  (%all %w-decimal %w-wide-tuple %0)
        +wide-brack-snap %wide-form-b
        +wide-brack-so   %wide-form-b
        +wide-brack-over %wide-form-b
        +wide-brack-to   %wide-form-b
        +wide-brack-un   %wide-form-f

        +wide-form-a %w-wide
        +wide-form-b (%all %w-wide %w-wide %0)
        +wide-form-c (%star %w-wide)
        +wide-form-d
          ( %all
             %w-wide
             (%star (%pfix ',' (%all %w-term %w-wide %0)))
             %0
          )
        +wide-form-e
          ( %all 
            (%sfix ':' %w-wide)
            (%all %w-wide %w-wide %0)
            (%star (%pfix ',' (%all %w-wide %w-wide %0)))
            %0
          )
        +wide-form-f 
          (%all %w-wide %w-wide %w-wide %0)

        +w-wide-tuple (%pfix %white %wide-tuple)
        +wide-tuple
          ( %fab
            ( %all
              %wide
              (%star (%pfix %white %wide))
              %0
            )
            (code (for [c] (do .ltup .c)))
          )

        +wide-bare
          ( %one
            %wide-bare-pop
            %wide-bare-read
            %wide-bare-leg
            %wide-bare-rock
            %0
          )

        +wide-bare-pop
          ( %fab
            (%pfix '+' %wide)
            (code (for [c] (%pop .c)))
          )

        +wide-bare-read
          ( %one
            ( %fab
              ( %all 
                %term
                (%pfix (%all '/' %gray %0) %wide)
                %0
              )
              (code (for [c d] (%bind .c .d)))
            )
            ( %fab 
              ( %all 
                %prime 
                ( %one 
                  (%fab '*' (code (for [c] %0))) 
                  %term 
                  %0
                )
                %0
              )
              (code (for [c] (%read .c)))
            )
            %0
          )

        +wide-bare-leg
          ( %one
            ( %fab
              (%pfix '$' %decimal)
              (code (for [c] (%leg .c)))
            )
            ( %fab
              '$'
              (code (for [c] (%leg %1)))
            )
            %0
          )

        +wide-bare-rock
          ( %fab
            ( %one
              %nil
              %flag
              %term
              %hexadecimal
              %decimal
              %0
            )
            (code (for [c] (%rock .c)))
          )

        +nil
          (%fab '~' (code (for [c] %0)))

        +flag
          (%one
            (%fab '|' (code (for [c] %0)))
            (%fab '&' (code (for [c] %1)))
            %0
          )

        +w-term (%pfix %white %term)
        +term
          ( %fab
            ( %all
              (%one (%byte 'a' 'z') (%byte 'A' 'Z') %0)
              (%star
                (%one 
                  (%byte 'a' 'z') 
                  (%byte 'A' 'Z') 
                  (%byte '0' '9')
                  '-'
                  %0
                )
              )
              %0
            )
            (code (for [c] (do .glom %3 .c)))
          )

        +quote
          (%fab
            (%ifix %39 %39
              (%star 
                (%one 
                  (%byte %32 %38)
                  (%byte %40 %91)
                  (%byte %93 %126)
                  (%fab 
                    (%all %92 %92 %0) 
                    (code (for [c] %92))
                  )
                  (%fab 
                    (%all %92 %39 %0) 
                    (code (for [c] %39))
                  )
                  %0
                )
              )
            )
            (code (for [c] (%noun (do .glom %3 .c))))
          )

        +w-decimal (%pfix %white %decimal)
        +decimal
          (%one
            (%fab
              '0'
              (code (for [c] %0))
            )
            (%fab
              (%all (%byte '1' '9') (%star %byte '0' '9') %0)
              (code
                :for [c]
                  >on d %0
                    +loop
                      {fit .c
                        +[0] .d
                        +[h t]
                          {next 
                            +.c .c.t
                            +.d 
                              (do .add 
                                (do .sub '0' .c.h) 
                                (do .mul %10 .d)
                              )
                          }
                      }
              )
            )
            %0
          )

        +hexadecimal
          (%fab
            (%pfix 
              (%text '0x')
              (%star (%one (%byte '0' '9') (%byte 'a' 'f') %0))
            )
            (code
              :for [c]
                >on d %0
                  +loop
                    {fit .c
                      +[0] .d
                      +[h t]
                        {next 
                          +.c .c.t
                          +.d
                            :do .add
                              :cell
                                (do .mul %16 .d)
                                >if (do .gte .c.h 'a')
                                  (do .sub 'W' .c.h)
                                  (do .sub '0' .c.h)
                        }
                    }
            )
          )

        +prime
          ( %fab
            (%star '`')
            (code (for [c] (do .len .c)))
          )
  
        +gray
          (%star (%one %comment %32 %10 %0))

        +white
          (%some (%one %comment %32 %10 %0))

        +comment
          (%all '-' '-' (%star %byte %32 %126) %10 %0)
      }
