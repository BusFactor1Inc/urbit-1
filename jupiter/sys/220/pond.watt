++  ur
  --
  =>  &.
      ++  bone  (list %{task})
      ++  fact  ~[p=(yard) q=(blob)]
      ++  meat  ~[p=(skin) q=(bone)]
      ++  skin  (list fact)
      ++  soul  ~[p=((map yard blob)) q=well]
      ++  task  |+((soul) (meat))
      ++  well  |+((yard) ((unit blob)))
      --
  &=  sol=*soul
  ++  spin
    |=  [kin=*skin kel=*bone]
    ^-  [p=*meat q=*soul]
    =>  .(p.sol (~(gas by p.sol) kin))
    =+  pen=*skin
    |-  ^-  [p=*meat q=*soul]
    =+  ^=  now
        |-  ^-  *meat
        ?~  kel
          [~ ~]
        =+  [neu=(i.kel sol) nex=$(kel t.kel)]
        [(weld p.neu p.nex) (weld q.neu q.nex)]
    ?~  p.now
      [[pen q.now] sol]
    $(pen (weld p.now pen), p.sol (~(gas by p.sol) p.now), kel q.now)
  ::
  ++  scry
    |=  [wat=*yard]
    =+  git=(~(get by p.sol) wat)
    =+  sip=(q.sol wat)
    ?~(git sip ?~(sip git ~|(scry !!)))
  --

++  wait
  |=  [bax=*yard bot=|+(*blob *meat)]
  ^-  *meat
  |+  sol=*soul
  =+  git=(~(scry ur sol) bax)
  ?~  git
    [~ [^?(..$) ~]]
  (bot u.git)
