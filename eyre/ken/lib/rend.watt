|*
::::
::
    ball
  |?
    ^+(@ *rock)
    [%cask p=*rock]
    [%duct p=*tape]
    [%meld p=*(list ball)]
    [%nest p=[p=*tape q=*tape] q=*(list ball)]
  ==
::::
::
    club
  =+  pup=*ball
  |*
  ::::
  ::      wit: width rammed
      wit
    ^-  @
    ?-  pup
        @           (met 3 pup)
        [%cask *]   (met 3 p.pup)
        [%meld *]   (roll p.pup =+([*ball @] |=((add -<+ wit(pup -<-)))))
        [%duct *]   (lent p.pup)
    ::
        [%nest *]
      %+  add
        (add (lent p.p.pup) (lent q.p.pup))
      %+  roll
        q.pup
      =+  [*ball @]
      |=((add ?~(-<+ 0 1) (add -<+ wit(pup -<-))))
    == 
  ::::
  ::        ram: print wide
      ram
    ^-  *tape
    ?-  pup 
    ::
        @           (rip 3 pup)
        [%cask *]   (rip 3 p.pup)
        [%meld *]   (reel p.pup =+([*ball *tape] |=((weld ram(pup -<-) -<+))))
        [%duct *]   p.pup 
    ::
        [%nest *]
      %+  weld
        p.p.pup
      |-  ^-  *tape
      ?-  q.pup
        ~       q.p.pup
        [* ~]   (weld ram(pup i.q.pup) q.p.pup)
        ^       (weld ram(pup i.q.pup) `*tape`[' ' $(q.pup t.q.pup)])
      ==
    ==
  ::::
  ::        fly: print tall
      fly
    =+  bor=@
    |=
    ^-  *wall
    =+  col=@
    =>  |*
        ::::
        ::        ind: indent tape
            ind
          =+  tep=*tape
          |=
          ^-  *tape
          ?~  col
            tep
          $(col (dec col), tep [' ' tep])
        ==
    ::::
    =+  lux=*wall
    |-  ^-  *wall
    ?.  ?&(?=([%nest *] pup) (gte (add col wit) bor))
      [(ind ram) lux]
    :-  (ind p.p.pup)
    |-  ^-  *wall
    ?~  q.pup
      [(ind q.p.pup) lux]
    %=  $$
      pup   i.q.pup
      lux   $(q.pup t.q.pup)
      col   ?:((gte col (mul 2 (div bor 3))) 0 (add 2 col))
    ==
  ::
  ::::
  ==
::::
::
    golf
  =+  nut=*
  |%
  ::::
  ::
      dem
    (num 10 =+(@ |=((add '0' -<))))
  ::::
  ::
      gut
    |-  ^-  *ball
    ?-  nut
        @   unt(nut nut)
        ^
      :+  %nest
        [['[' ~] [']' ~]]
      |-  ^-  *(list ball)
      ?-  nut
        [* @]   [$$(nut -.nut) $$(nut +.nut) ~]
        [* ^]   [$$(nut -.nut) $(nut +.nut)]
      ==
    ==
  ::::
  ::
      ham
    (num 16 =+(@ |=(?:((lth 10 -<) (add '0' -<) (add 'a' -<)))))
  ::::
  ::
      num
    =>  ^:(@ nut)
    =+  [zel=@ hoz==+(@ |=(@))]
    |:
    ^-  [%duct p=*tape]
    :-  %duct
    ?:  .=(0 nut)
      [(hoz 0) ~]
    =+  biq=`*tape`~
    |-  ^-  *tape
    ?:  .=(0 nut)
      biq
    $(nut (div nut zel), biq [(hoz (mod nut zel)) biq])
  ::::
  ::
      tis
    =>  ^:(*tape nut)
    ^-  *ball
    [%duct nut]
  ::::
  ::
      unt
    =>  ^:(@ nut)
    ^-  [%duct p=*tape]
    ?:  ?&  (gte (met 3 nut) 2)
            |-
            ?:  .=(0 nut)
              &
            =+  vis=(end 3 1 nut)
            =+  gor=(rsh 3 1 nut)
            ?&(?|(.=('-' vis) ?&((gte vis 'a') (lte vis 'z'))) $(nut gor))
        ==
      =<([- ['%' +]] vam)
    ?:  (lte (met 3 nut) 2)
      dem
    ham
  ::::
  ::
      vam
    =>  ^:(@ nut)
    ^-  [%duct p=*tape]
    :-  %duct
    |-  ^-  *tape
    ?:  .=(0 nut)
      ~
    [(end 3 1 nut) $(nut (rsh 3 1 nut))]
  ::
  ::::
  ==
::
::::
==
