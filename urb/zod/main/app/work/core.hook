::
::::  /hook/core/talk/app
  ::
/?  314
/-  *work
::
::::
  :: 
!:
|%                                                  ::  data structures
++  axle  (list todo-l)
++  todo  
  $:  upcoming=(list ,pending-l)
      following=(list ,pending)
      incoming=(list ,pending)
      open=(list ,pending)
  ==
++  gift
  $%  [%rush rasp]
      [%rust rasp]
      [%nice ~]
  ==
++  rasp
  $%  [%json p=json]
      [%work-report p=report-l]
  ==
--
!:
::::
  ::
|_  [hid=hide vat=axle]
++  peer
  |=  [ost=bone her=ship pax=path]
  :_  +>.$
  :_  ~
  ?+  -.pax
    [ost %give %mean `[%not-found [%leaf "you need to specify a path"]~]]
  %r
    ~&  [%give-vat vat]
    [ost %give %rush %work-report [%list vat]]
  ==
::
++  spam
  %+  turn  
    %+  skim  (~(tap by sup.hid))
      |=  [ost=bone his=ship pax=path]
    ?=([%r ~] pax)
  |=  [ost=bone his=ship pax=path]
    [ost %give %rush %work-report [%list vat]]
::
++  insert
  |=  [vet=axle pos=@ud tod=todo-l]
    ;:  weld
      (swag [0 pos] vet)
      (limo [tod ~])
      (swag [pos (lent vet)] vet)
    ==
++  poke-work-command
  |=  [ost=bone you=ship mez=command-l]
  =.  vat
  ?-  -.mez
    %create
      %^  insert  vat
        sort.+.mez
      task.+.mez
    %update  
      ~&  %update
      =+  ^=  vet
        %+  murn  vat
        |=  t=todo-l
        ^-  (unit todo-l)
        ?:  =(serial.t serial.task.+.mez)
          ~
        `t
      %^  insert  vet
        sort.+.mez
      task.+.mez
    %delete
      %+  skip
        vat
      |=  t=todo-l
        =(serial.t +.mez)
  ==
  ~&  [%give-vat vat]
  [[[ost %give %nice ~] spam] +>.$]
--